---
- name: Bootstrap server setup
  hosts: all
  become: yes
  vars_prompt:
    - name: jitsi_domain
      prompt: "Enter the domain for Jitsi Meet"
      private: no
      
    - name: jitsi_email
      prompt: "Enter the email address to use for Let's Encrypt registration"
      private: no

  vars:
    auth_domain: "auth.{{ jitsi_domain }}"
    
  tasks:
    - name: Echo back the domain passed to the playbook
      debug:
       msg: "jitsi domain = {{ jitsi_domain }}"

    - name: Echo back the email passed to the playbook
      debug:
        msg: "jitsi email = {{ jitsi_email }}"

    - name: End playbook early if domain and email are defaults
      fail:
        msg: |
         PLAYBOOK ERROR:

         jitsi_domain is the default {{ jitsi_domain }}

         please change it by passing evironment variables, like so
         JITSI_DOMAIN=meet.example.com JITSI_EMAIL=jitsi@example.com vagrant up
      when: jitsi_domain == "jitsi.meet.local" 

    - name: End playbook early if domain and email are defaults
      fail:
        msg: |
         PLAYBOOK ERROR:

         jitsi_email is the default {{ jitsi_email }}
 
         please change it by passing evironment variables, like so
         JITSI_DOMAIN=meet.example.com JITSI_EMAIL=jitsi@example.com vagrant up
      when: jitsi_email == "admin@jitsi.meet.local"

    - name: Generate Jitsi admin password
      set_fact:
        jitsi_admin_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters') }}"

    - name: Extract username from jitsi_email
      set_fact:
        jitsi_admin_user: "{{ jitsi_email.split('@')[0] }}"

    - name: debug admin username
      debug:
        msg: "Admin username is {{ jitsi_admin_user }}"

    - name: Set guest domain
      ansible.builtin.set_fact:
        guest_domain: "guest.{{ jitsi_domain }}"

    - name: debug guest domain
      debug:
        msg: "Guest domain is {{ guest_domain }}"


    # ================ NOTES ===================
    # ONLY DEBIAN AND UBUNTU SUPPORTED SEE WEB
    # SITE: https://jitsi.org/downloads/
    # BASED ON: https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart

    # === Cleanup task to ensure idempotency ===
    # Clean up conflicting repo (optional but recommended)
    # This might not need to stay, but while we are troubleshooting the repos not adding right
    - name: Remove manually added universe repo (if exists)
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe"
        state: absent
        filename: 'universe'
      when: ansible_distribution == "Ubuntu"

    # === Update and Upgrade ===
    - name: Update apt cache (Debian)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Upgrade all packages (Debian)
      apt:
        upgrade: dist
      when: ansible_os_family == "Debian"

    # === Install packages ===
    - name: Install essential packages (Debian)
      apt:
        name:
          - vim
          - emacs
          - nginx-full
          - gnupg2
          - curl
          - wget
          - apt-transport-https
        state: present
      when: ansible_os_family == "Debian"

    # === Repositories ===
    - name: Ensure Ubuntu archive keyring is installed
      apt:
        name: ubuntu-keyring
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Add universe repo (Ubuntu)
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/ubuntu-archive-keyring.gpg] http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe"
        state: present
        filename: 'universe'
      when: ansible_distribution == "Ubuntu"

    - name: Add Prosody APT key (Debian)
      get_url:
        url: https://prosody.im/files/prosody-debian-packages.key
        dest: /etc/apt/keyrings/prosody-debian-packages.key
        mode: '0644'
      when: ansible_os_family == "Debian"

    - name: Add Prosody repository (Debian)
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/prosody-debian-packages.key] http://packages.prosody.im/debian {{ ansible_distribution_release }} main"
        filename: prosody-debian-packages
        state: present
      when: ansible_os_family == "Debian"

    - name: Install lua5.2 (Debian)
      apt:
        name: lua5.2
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Jitsi GPG key (Debian)
      shell: |
        curl -sL https://download.jitsi.org/jitsi-key.gpg.key | gpg --dearmor > /usr/share/keyrings/jitsi-keyring.gpg
      args:
        creates: /usr/share/keyrings/jitsi-keyring.gpg
      when: ansible_os_family == "Debian"

    - name: Add Jitsi repository (Debian)
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/"
        filename: jitsi-stable
        state: present
      when: ansible_os_family == "Debian"

    - name: Update apt after adding repositories (Debian)
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    # === Pre Seed Jitsi Meet to Prevent TUI Prompts ===
    - name: Preseed Jitsi Meet hostname
      debconf:
        name: jitsi-meet
        question: jitsi-meet/hostname
        value: "{{ jitsi_domain }}"
        vtype: string
    
    - name: Preseed Let's Encrypt certificate choice
      debconf:
        name: jitsi-meet
        question: jitsi-meet/cert-choice
        value: Use Let's Encrypt certificate
        vtype: select
    
    - name: Preseed Let's Encrypt email (main)
      debconf:
        name: jitsi-meet
        question: jitsi-meet/letsencrypt-email
        value: "{{ jitsi_email }}"
        vtype: string
    
    - name: Preseed Let's Encrypt email (web config fallback)
      debconf:
        name: jitsi-meet-web-config
        question: jitsi-meet/email
        value: "{{ jitsi_email }}"
        vtype: string
    
    - name: Disable JaaS integration
      debconf:
        name: jitsi-meet-web-config
        question: jitsi-meet/jvb-enable-jaas
        value: false
        vtype: boolean
    
    - name: Disable JVB hostname assignment
      debconf:
        name: jitsi-meet-web-config
        question: jitsi-meet/jvb-assign-jvb-hostname
        value: false
        vtype: boolean
    
    - name: Disable jvb-brew-install (extra services)
      debconf:
        name: jitsi-meet
        question: jitsi-meet/jvb-brew-install
        value: false
        vtype: boolean

    - name: Preseed jitsi-meet-prosody jvb hostname
      ansible.builtin.debconf:
        name: jitsi-meet-prosody
        question: jitsi-meet-prosody/jvb-hostname
        value: "{{ jitsi_domain }}"
        vtype: string
 
    - name: Preseed jitsi-meet-prosody dial-in support (Jigasi)
      ansible.builtin.debconf:
        name: jitsi-meet-prosody
        question: jitsi-meet-prosody/jigasi-sip-account
        value: "false"
        vtype: boolean

    - name: Preseed jitsi-videobridge2 hostname
      ansible.builtin.debconf:
        name: jitsi-videobridge2
        question: jitsi-videobridge/jvb-hostname
        value: "{{ jitsi_domain }}"
        vtype: string

    - name: Install Jitsi Meet non-interactively
      apt:
        name: jitsi-meet
        state: present
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Set or update JVB_OPTS in jitsi-videobridge2 config
      lineinfile:
        path: /etc/default/jitsi-videobridge2
        regexp: '^JVB_OPTS='
        line: 'JVB_OPTS="--apis=rest"'
        create: yes
        state: present

    - name: Ensure Jicofo config file exists
      ansible.builtin.file:
        path: /etc/jitsi/jicofo/sip-communicator.properties
        state: touch
        mode: '0644'

    - name: Restart Jitsi and related services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop:
        - prosody
        - jicofo
        - jitsi-videobridge2
        - nginx

    - name: Check if auth domain config exists
      stat:
        path: "/etc/prosody/conf.avail/{{ auth_domain }}.cfg.lua"
      register: auth_domain_cfg

    - name: Create Prosody config for auth domain if it doesn't exist
      copy:
        dest: "/etc/prosody/conf.avail/{{ auth_domain }}.cfg.lua"
        content: |
          VirtualHost "{{ auth_domain }}"
              authentication = "internal_plain"
              ssl = {
                  key = "/etc/prosody/certs/{{ jitsi_domain }}.key";
                  certificate = "/etc/prosody/certs/{{ jitsi_domain }}.crt";
              }
              modules_enabled = {
                  "bosh";
                  "pubsub";
                  "ping";
              }
              c2s_require_encryption = false
      when: not auth_domain_cfg.stat.exists

    - name: Display generated Jitsi admin password
      ansible.builtin.debug:
        msg: |
          Admin user created for secure domain access:
          Username: {{ jitsi_admin_user }}
          Password: {{ jitsi_admin_password }}

    - name: Remove anonymous authentication line from main VirtualHost (no regex)
      ansible.builtin.lineinfile:
        path: "/etc/prosody/conf.avail/{{ jitsi_domain }}.cfg.lua"
        line: '    authentication = "jitsi-anonymous" -- do not delete me'
        state: absent

    - name: Add internal authentication to main VirtualHost
      ansible.builtin.blockinfile:
        path: "/etc/prosody/conf.avail/{{ jitsi_domain }}.cfg.lua"
        marker: "-- {mark} ANSIBLE MANAGED BLOCK: authentication config"
        block: |
          authentication = "internal_plain"
        insertafter: '^VirtualHost "{{ jitsi_domain }}"'
    
    - name: Set authentication to internal_plain for auth domain
      ansible.builtin.lineinfile:
        path: "/etc/prosody/conf.avail/{{ auth_domain }}.cfg.lua"
        regexp: '^\\s*authentication\\s*=\\s*".*?"'
        line: '    authentication = "internal_plain"'

    - name: Debug main VirtualHost authentication setting
      ansible.builtin.shell: |
        grep -A1 'VirtualHost "{{ jitsi_domain }}"' /etc/prosody/conf.avail/{{ jitsi_domain }}.cfg.lua
      register: prosody_main_vhost
      changed_when: false

    - name: Show authentication config for main VirtualHost
      ansible.builtin.debug:
        msg: "{{ prosody_main_vhost.stdout }}"


    - name: Register admin user in Prosody
      ansible.builtin.command: >
        prosodyctl register {{ jitsi_admin_user }} auth.{{ jitsi_domain }} {{ jitsi_admin_password }}
      args:
        creates: "/var/lib/prosody/{{ jitsi_admin_user }}.dat"

    - name: Set admin user in Prosody config
      ansible.builtin.lineinfile:
        path: "/etc/prosody/conf.avail/{{ jitsi_domain }}.cfg.lua"
        regexp: '^admins ?='
        line: 'admins = { "{{ jitsi_admin_user }}" }'
        insertafter: '^-- Set up admins'

    - name: Add guest virtual host config to Prosody
      ansible.builtin.blockinfile:
        path: "/etc/prosody/conf.avail/{{ jitsi_domain }}.cfg.lua"
        marker: "-- {mark} ANSIBLE MANAGED BLOCK: guest virtual host"
        block: |
          VirtualHost "{{ guest_domain }}"
              authentication = "anonymous"
              c2s_require_encryption = false

    - name: Configure Jicofo authentication URL
      ansible.builtin.lineinfile:
        path: "/etc/jitsi/jicofo/sip-communicator.properties"
        regexp: '^org.jitsi.jicofo.auth.URL='
        line: 'org.jitsi.jicofo.auth.URL=XMPP:auth.{{ jitsi_domain }}'

    - name: Ensure Jicofo knows about guest domain
      ansible.builtin.lineinfile:
        path: "/etc/jitsi/meet/{{ jitsi_domain }}-config.js"
        regexp: "^\\s*anonymousdomain:"
        line: "    anonymousdomain: \"{{ guest_domain }}\","
        insertafter: "var config = {"

    - name: Enable Prosody config for guest domain
      ansible.builtin.file:
        src: "/etc/prosody/conf.avail/{{ jitsi_domain }}.cfg.lua"
        dest: "/etc/prosody/conf.d/{{ jitsi_domain }}.cfg.lua"
        state: link
        force: true

    - name: Restart all Jitsi services
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      loop:
        - prosody
        - jicofo
        - jitsi-videobridge2
        - nginx

    # - name: Run Let's Encrypt setup (with email fallback)
    #   shell: "CERT_EMAIL={{ jitsi_email }} /usr/share/jitsi-meet/scripts/install-letsencrypt-cert.sh"
    #   args:
    #     creates: "/etc/letsencrypt/live/{{ jitsi_domain }}/fullchain.pem"

    # === Firewall rules ===
    - name: Allow UFW ports (Debian)
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      loop:
        - { port: "80", proto: "tcp" }
        - { port: "443", proto: "tcp" }
        - { port: "10000", proto: "udp" }
        - { port: "22", proto: "tcp" }
        - { port: "3478", proto: "udp" }
        - { port: "5222", proto: "tcp" }
        - { port: "5347", proto: "tcp" }
        - { port: "5349", proto: "tcp" }
      when: ansible_os_family == "Debian"

    - name: Enable UFW (Debian)
      ufw:
        state: enabled
        policy: allow
      when: ansible_os_family == "Debian"

    - name: Show UFW status (Debian)
      command: ufw status verbose
      register: ufw_status
      when: ansible_os_family == "Debian"

    - name: Print UFW status (Debian)
      debug:
        var: ufw_status.stdout_lines
      when: ansible_os_family == "Debian"
