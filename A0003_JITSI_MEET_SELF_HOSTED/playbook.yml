---
- name: Bootstrap server setup
  hosts: all
  become: yes
  vars_prompt:
    - name: jitsi_domain
      prompt: "Enter the domain for Jitsi Meet"
      private: no

  tasks:
    - name: Echo back the domain passed to the playbook
      debug:
        msg: "jitsi domain = {{ jitsi_domain }}"

    # ================ NOTES ===================
    # ONLY DEBIAN AND UBUNTU SUPPORTED SEE WEB
    # SITE: https://jitsi.org/downloads/
    # BASED ON: https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart

    # === Cleanup task to ensure idempotency ===
    # Clean up conflicting repo (optional but recommended)
    # This might not need to stay, but while we are troubleshooting the repos not adding right
    - name: Remove manually added universe repo (if exists)
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe"
        state: absent
        filename: 'universe'
      when: ansible_distribution == "Ubuntu"

    # === Update and Upgrade ===
    - name: Update apt cache (Debian)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Upgrade all packages (Debian)
      apt:
        upgrade: dist
      when: ansible_os_family == "Debian"

    # === Install packages ===
    - name: Install essential packages (Debian)
      apt:
        name:
          - vim
          - emacs
          - nginx-full
          - gnupg2
          - curl
          - wget
          - apt-transport-https
        state: present
      when: ansible_os_family == "Debian"

    # === Insert a breakpoint ===
    - name: Breakpoint - pause for manual inspection
      pause:
        prompt: "Paused here. Press Enter to continue..."

    # === Configure Certbot and Provision an SSL
    # === Provision an SSL Certificate for {{ jitsi_domain }} using Let's Encrypt/Certbot

    # TBA

    # === Repositories ===
    - name: Ensure Ubuntu archive keyring is installed
      apt:
        name: ubuntu-keyring
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Add universe repo (Ubuntu)
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/ubuntu-archive-keyring.gpg] http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe"
        state: present
        filename: 'universe'
      when: ansible_distribution == "Ubuntu"

    - name: Add Prosody APT key (Debian)
      get_url:
        url: https://prosody.im/files/prosody-debian-packages.key
        dest: /etc/apt/keyrings/prosody-debian-packages.key
        mode: '0644'
      when: ansible_os_family == "Debian"

    - name: Add Prosody repository (Debian)
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/prosody-debian-packages.key] http://packages.prosody.im/debian {{ ansible_distribution_release }} main"
        filename: prosody-debian-packages
        state: present
      when: ansible_os_family == "Debian"

    - name: Install lua5.2 (Debian)
      apt:
        name: lua5.2
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Jitsi GPG key (Debian)
      shell: |
        curl -sL https://download.jitsi.org/jitsi-key.gpg.key | gpg --dearmor > /usr/share/keyrings/jitsi-keyring.gpg
      args:
        creates: /usr/share/keyrings/jitsi-keyring.gpg
      when: ansible_os_family == "Debian"

    - name: Add Jitsi repository (Debian)
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/"
        filename: jitsi-stable
        state: present
      when: ansible_os_family == "Debian"

    - name: Update apt after adding repositories (Debian)
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    # === Pre Seed Jitsi Meet to Prevent TUI Prompts ===
    - name: Preseed Jitsi Meet hostname
      debconf:
        name: jitsi-meet
        question: jitsi-meet/hostname
        value: "{{ jitsi_domain }}"
        vtype: string
    
    - name: Preseed Let's Encrypt certificate choice
      debconf:
        name: jitsi-meet
        question: jitsi-meet/cert-choice
        value: Use Let's Encrypt certificate
        vtype: select
    
    - name: Preseed Let's Encrypt email (main)
      debconf:
        name: jitsi-meet
        question: jitsi-meet/letsencrypt-email
        value: richard.forth@gmail.com
        vtype: string
    
    - name: Preseed Let's Encrypt email (web config fallback)
      debconf:
        name: jitsi-meet-web-config
        question: jitsi-meet/email
        value: richard.forth@gmail.com
        vtype: string
    
    - name: Disable JaaS integration
      debconf:
        name: jitsi-meet-web-config
        question: jitsi-meet/jvb-enable-jaas
        value: false
        vtype: boolean
    
    - name: Disable JVB hostname assignment
      debconf:
        name: jitsi-meet-web-config
        question: jitsi-meet/jvb-assign-jvb-hostname
        value: false
        vtype: boolean
    
    - name: Disable jvb-brew-install (extra services)
      debconf:
        name: jitsi-meet
        question: jitsi-meet/jvb-brew-install
        value: false
        vtype: boolean

    - name: Preseed jitsi-meet-prosody jvb hostname
      ansible.builtin.debconf:
        name: jitsi-meet-prosody
        question: jitsi-meet-prosody/jvb-hostname
        value: "{{ jitsi_domain }}"
        vtype: string
 
    - name: Preseed jitsi-meet-prosody dial-in support (Jigasi)
      ansible.builtin.debconf:
        name: jitsi-meet-prosody
        question: jitsi-meet-prosody/jigasi-sip-account
        value: "false"
        vtype: boolean

    - name: Preseed jitsi-videobridge2 hostname
      ansible.builtin.debconf:
        name: jitsi-videobridge2
        question: jitsi-videobridge/jvb-hostname
        value: "{{ jitsi_domain }}"
        vtype: string

    - name: Install Jitsi Meet non-interactively
      apt:
        name: jitsi-meet
        state: present
      environment:
        DEBIAN_FRONTEND: noninteractive

#    # === Provision Let's Encrypt SSL Manually using the jitsi tool ===
#    - name: Run Let's Encrypt setup (with email fallback)
#      shell: CERT_EMAIL=richard.forth@gmail.com /usr/share/jitsi-meet/scripts/install-letsencrypt-cert.sh
#      args:
#        creates: /etc/letsencrypt/live/meet.richardforth.co.uk/fullchain.pem
 
    # === Firewall rules ===
    - name: Allow UFW ports (Debian)
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      loop:
        - { port: "80", proto: "tcp" }
        - { port: "443", proto: "tcp" }
        - { port: "10000", proto: "udp" }
        - { port: "22", proto: "tcp" }
        - { port: "3478", proto: "udp" }
        - { port: "5222", proto: "tcp" }
        - { port: "5347", proto: "tcp" }
        - { port: "5349", proto: "tcp" }
      when: ansible_os_family == "Debian"

    - name: Enable UFW (Debian)
      ufw:
        state: enabled
        policy: allow
      when: ansible_os_family == "Debian"

    - name: Show UFW status (Debian)
      command: ufw status verbose
      register: ufw_status
      when: ansible_os_family == "Debian"

    - name: Print UFW status (Debian)
      debug:
        var: ufw_status.stdout_lines
      when: ansible_os_family == "Debian"
